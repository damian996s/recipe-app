{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","Math","round","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAoBeA,G,YAjBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,sBAAKC,UAAU,SAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBJ,IACvB,oBAAII,UAAU,OAAd,SACKD,EAAYE,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,oBAAGH,UAAU,WAAb,uBAAmCI,KAAKC,MAAMR,MAC9C,qBAAKG,UAAU,QAAQM,IAAKR,EAAOS,IAAI,UCuCpCC,EAjDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAgBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAMwB,SARQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOhB,EAAQiB,SAb1C,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAaf,wBAAQ5B,UAAU,gBAAgB2B,KAAK,SAAvC,uBAEF,qBAAK3B,UAAU,UAAf,SACGU,EAAQT,KAAI,SAAA8B,GAAM,OACnB,cAAC,EAAD,CAEAnC,MAAOmC,EAAOA,OAAOC,MACrBnC,SAAUkC,EAAOA,OAAOlC,SACxBC,MAAOiC,EAAOA,OAAOjC,MACrBC,YAAagC,EAAOA,OAAOhC,aAJtBgC,EAAOA,OAAOC,gBC7BZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5981bda1.chunk.js","sourcesContent":["import React from 'react';\nimport './recipe.css'\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n    return(\n        <div className='recipe'>\n            <h1 className='title'>{title}</h1>\n            <ul className=\"list\">\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ul>\n            <p className=\"calories\">Calories: {Math.round(calories)}</p>\n            <img className=\"image\" src={image} alt=\"\" \n            />\n        </div>\n    );\n}\n\n\nexport default Recipe;","import React, {useEffect, useState} from 'react'\nimport './App.css';\nimport Recipe from \"./Recipe\";\nconst App = () => {\n\n  const APP_ID = \"81eb5489\"\n  const APP_KEY = \"86228e07a910d3e5cb0777d8c5be04db\"\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken')\n  \n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n        <Recipe \n        key={recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients} />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}